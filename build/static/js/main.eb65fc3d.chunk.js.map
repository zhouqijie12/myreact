{"version":3,"sources":["react-router.js","serviceWorker.js","index.js"],"names":["Aa","_this$props","this","props","location","match","history","_this$props$history","length","action","react_default","a","createElement","className","style","color","JSON","stringify","URLSearchParams","search","get","Component","Bb","_this$props2","RouterComponent","BrowserRouter","react_router_AddressBar","Link","to","NavLink","activeClassName","Route","exact","path","component","render","_ref","AddressBar","_ref2","Boolean","window","hostname","Welcome","title","Test","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hander","setState","state","m","Fragment","onClick","React","ReactDOM","src_Test","react_router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb65fc3d.chunk.js","sourcesContent":["import { BrowserRouter as Router, Route, Link, NavLink} from 'react-router-dom' \nimport React, { Component } from 'react'\n\nclass Aa extends Component{\n    render(){\n        let {location, match, history, history: {length, action} }  = this.props\n        return (\n            <div className=\"aa\">\n                <p><span style={{'color': 'red'}}>location: </span>{JSON.stringify(location,null,2)}</p>\n                <p><span style={{'color': 'red'}}>match: </span>{JSON.stringify(match,null,2)}</p>\n                <p><span style={{'color': 'red'}}>history: </span>{JSON.stringify(history,null,2)}</p>\n                我是Aa\n                <p>id:{new URLSearchParams(location.search).get('id')}</p>\n                <p>id:{new URLSearchParams(location.search).get('name')}</p>\n                <p>{length}</p>\n                {action}\n            </div>\n        )\n    }\n}\nclass Bb extends Component{\n    render(){\n        let {location, match, history}  = this.props\n        return (\n            <div className=\"bb\">\n                <p><span style={{'color': 'red'}}>location: </span>{JSON.stringify(location,null,2)}</p>\n                <p><span style={{'color': 'red'}}>match: </span>{JSON.stringify(match,null,2)}</p>\n                <p><span style={{'color': 'red'}}>history: </span>{JSON.stringify(history,null,2)}</p>\n                我是Bb\n            </div>\n        )\n    }\n}\n\nclass RouterComponent extends Component{\n    render(){\n        return (\n            <Router>\n                <div>\n                <AddressBar></AddressBar>\n                <ul className=\"linkLi\">\n                    <li><Link to=\"/aa?id=123&name=minooo\">aa</Link></li>\n                    <li><Link to=\"/bb\">bb</Link></li>\n                    <li><Link to=\"/cc\">ccc</Link></li>\n                    <li><Link to=\"/dd/react/router\">dddd</Link></li>\n                    <li><NavLink activeClassName=\"select\" to=\"/bb\">eeee</NavLink></li>\n                </ul>\n                    <Route exact path=\"/aa\" component={Aa}></Route>\n                    <Route path=\"/bb\" component={Bb}></Route>\n                    <Route path=\"/cc\" render={()=> <div>CCCCCCC</div>}></Route>\n                    <Route path=\"/dd/:page/:supage?\" render={({location, match, history})=> {\n                        return (\n                            <div>dddd\n                                <p><span style={{'color': 'red'}}>location: </span>{JSON.stringify(location,null,2)}</p>\n                                <p><span style={{'color': 'red'}}>match: </span>{JSON.stringify(match,null,2)}</p>\n                                <p><span style={{'color': 'red'}}>history: </span>{JSON.stringify(history,null,2)}</p>\n                            </div>\n                        )\n                    }}></Route>\n                </div>\n            </Router>\n        )\n    }\n}\n\nclass AddressBar extends Component{\n    render(){\n        return(\n            <Route render={({location, match, history}) => {\n                    return (\n                        <div>\n                            <div>location URL: {JSON.stringify(location,null,2)}}</div>\n                            <div>match URL: {JSON.stringify(match,null,2)}}</div>\n                            <div>history URL: {JSON.stringify(history,null,2)}}</div>\n                        </div>\n                    )\n                }}>\n            </Route>\n        )\n    }\n}\nexport default RouterComponent","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RouterComponent from './react-router'\nimport './App.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nfunction Welcome(props){\n    return <h3>{props.title}</h3>\n}\nclass Test extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            m: 1\n        }\n    }\n    hander = () =>{\n        this.setState((state)=>{\n            return {\n                m: state.m + 1\n            }\n        })\n        this.setState((state)=>{\n            return {\n                m: state.m + 1\n            }\n        })\n        this.setState((state)=>{\n            return {\n                m: state.m + 1\n            }\n        })\n    }\n    render(){\n        return (\n            <React.Fragment>\n                <p>{this.state.m}</p>\n                <button onClick={this.hander}>test</button>\n            </React.Fragment>\n        )\n    }\n}\n\n\nReactDOM.render(\n    <div>\n        {Welcome({'title':'cccc'})}\n        <Welcome title=\"aaa\"/>\n        <Test></Test>\n        <RouterComponent></RouterComponent>\n    </div>, \ndocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}